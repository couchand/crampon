# generated by crampon
# when a tag comes up with child nodes, decide which one
# to create to hold those children
class Factory
  build: (tag) ->
    switch tag.tag
# note the class names are the tag names, but
#  - capitalized
#  - trailing 's' removed
      when 'Layout'
        Builder = Layout
      when 'layoutSections'
        Builder = LayoutSection
      when 'relatedLists'
        Builder = RelatedList
      when 'summaryLayout'
        Builder = SummaryLayout
      when 'miniLayout'
        Builder = MiniLayout
      when 'layoutColumns'
        Builder = LayoutColumn
      when 'layoutItems'
        Builder = LayoutItem
# shouldn't happen if our training set is large
      else throw new Error "unknown tag type #{tag.tag}"

    thing = new Builder()

    tag.getchildren().forEach (child) ->
      thing.set child.tag, child.text, child

# this is a particular special case...
    thing.finishBuild() if thing.finishBuild
    thing

factory = new Factory()
# each tag type that has child nodes has a class
# this is one top-level class
class Layout
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'layoutSections'
        @layoutSections = value
      when 'showEmailCheckbox'
        @showEmailCheckbox = value is 'true'
      when 'showRunAssignmentRulesCheckbox'
        @showRunAssignmentRulesCheckbox = value is 'true'
      when 'showSubmitAndAttachButton'
        @showSubmitAndAttachButton = value is 'true'
      else throw new Error "unknown field #{field} on Layout object"

# each tag type that has child nodes has a class
# this is one top-level class
class LayoutSection
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'customLabel'
        @customLabel = value is 'true'
      when 'detailHeading'
        @detailHeading = value is 'true'
      when 'editHeading'
        @editHeading = value is 'true'
      when 'label'
        @label = value
      when 'layoutColumns'
        @layoutColumns = value
      when 'style'
        @style = value
      else throw new Error "unknown field #{field} on layoutSections object"

# each tag type that has child nodes has a class
# this is one top-level class
class RelatedList
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'fields'
        @fields = value
      when 'relatedList'
        @relatedList = value
      when 'sortField'
        @sortField = value
      when 'sortOrder'
        @sortOrder = value
      when 'excludeButtons'
        @excludeButtons = value
      else throw new Error "unknown field #{field} on relatedLists object"

# each tag type that has child nodes has a class
# this is one top-level class
class SummaryLayout
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'masterLabel'
        @masterLabel = value
      when 'sizeX'
        @sizeX = parseInt value, 10
      when 'sizeY'
        @sizeY = parseInt value, 10
      when 'summaryLayoutStyle'
        @summaryLayoutStyle = value
      else throw new Error "unknown field #{field} on summaryLayout object"

# each tag type that has child nodes has a class
# this is one top-level class
class MiniLayout
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'fields'
        @fields = value
      when 'relatedLists'
        @relatedLists = value
      else throw new Error "unknown field #{field} on miniLayout object"

# each tag type that has child nodes has a class
# this is one top-level class
class LayoutColumn
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'layoutItems'
        @layoutItems = value
      else throw new Error "unknown field #{field} on layoutColumns object"

# each tag type that has child nodes has a class
# this is one top-level class
class LayoutItem
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'behavior'
        @behavior = value
      when 'field'
        @field = value
      else throw new Error "unknown field #{field} on layoutItems object"

module.exports = factory
