# generated by crampon
# when a tag comes up with child nodes, decide which one
# to create to hold those children
class Factory
  build: (tag) ->
    switch tag.tag
# note the class names are the tag names, but
#  - capitalized
#  - trailing 's' removed
      when 'Workflow'
        Builder = Workflow
      when 'fieldUpdates'
        Builder = FieldUpdate
      when 'rules'
        Builder = Rule
      when 'actions'
        Builder = Action
      when 'criteriaItems'
        Builder = CriteriaItem
      when 'alerts'
        Builder = Alert
      when 'recipients'
        Builder = Recipient
      when 'workflowTimeTriggers'
        Builder = WorkflowTimeTrigger
# shouldn't happen if our training set is large
      else throw new Error "unknown tag type #{tag.tag}"

    thing = new Builder()

    tag.getchildren().forEach (child) ->
      thing.set child.tag, child.text, child

# this is a particular special case...
    thing.finishBuild() if thing.finishBuild
    thing

factory = new Factory()
# each tag type that has child nodes has a class
# this is one top-level class
class Workflow
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)
    @fieldUpdates = {}
    @rules = {}

# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'fieldUpdates'
        thing = factory.build tag
        @fieldUpdates[thing.fullName] = thing
      when 'rules'
        thing = factory.build tag
        @rules[thing.fullName] = thing
      else throw new Error "unknown field #{field} on Workflow object"

# each tag type that has child nodes has a class
# this is one top-level class
class FieldUpdate
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'fullName'
        @fullName = value
      when 'description'
        @description = value
      when 'field'
        @field = value
      when 'formula'
        @formula = value
      when 'name'
        @name = value
      when 'notifyAssignee'
        @notifyAssignee = value is 'true'
      when 'operation'
        @operation = value
      when 'protected'
        @protected = value is 'true'
      else throw new Error "unknown field #{field} on fieldUpdates object"

# each tag type that has child nodes has a class
# this is one top-level class
class Rule
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'fullName'
        @fullName = value
      when 'actions'
        @actions = value
      when 'active'
        @active = value is 'true'
      when 'criteriaItems'
        @criteriaItems = value
      when 'description'
        @description = value
      when 'triggerType'
        @triggerType = value
      else throw new Error "unknown field #{field} on rules object"

# each tag type that has child nodes has a class
# this is one top-level class
class Action
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'name'
        @name = value
      when 'type'
        @type = value
      else throw new Error "unknown field #{field} on actions object"

# each tag type that has child nodes has a class
# this is one top-level class
class CriteriaItem
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'field'
        @field = value
      when 'operation'
        @operation = value
      else throw new Error "unknown field #{field} on criteriaItems object"

# each tag type that has child nodes has a class
# this is one top-level class
class Alert
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'fullName'
        @fullName = value
      when 'description'
        @description = value
      when 'protected'
        @protected = value is 'true'
      when 'recipients'
        @recipients = value
      when 'senderType'
        @senderType = value
      when 'template'
        @template = value
      else throw new Error "unknown field #{field} on alerts object"

# each tag type that has child nodes has a class
# this is one top-level class
class Recipient
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'recipient'
        @recipient = value
      when 'type'
        @type = value
      else throw new Error "unknown field #{field} on recipients object"

# each tag type that has child nodes has a class
# this is one top-level class
class WorkflowTimeTrigger
  constructor: ->
# maps of child elements by their name
# only elements that have themselves children
# (and thus are classes)


# primary method for filling up data
  set: (field, value, tag) ->
    switch field
      when 'actions'
        @actions = value
      when 'offsetFromField'
        @offsetFromField = value
      when 'timeLength'
        @timeLength = parseInt value, 10
      when 'workflowTimeTriggerUnit'
        @workflowTimeTriggerUnit = value
      else throw new Error "unknown field #{field} on workflowTimeTriggers object"

module.exports = factory
